

准备好库之后，一定要先修改以下库中的文件，否则会报错！
准备好库之后，一定要先修改以下库中的文件，否则会报错！
准备好库之后，一定要先修改以下库中的文件，否则会报错！



1.【cairosvg】

<Python Path> \Lib\site-packages\cairosvg\parser.py

    class Tree(Node):
        ……
        def __init__(self, **kwargs):
            ……
358 行:  - elif file_obj is not None:
         + elif (file_obj is not None) and hasattr(file_obj , "read") and hasattr(file_obj , "seek"):
              + file_obj.seek(0,0)
                bytestring = file_obj.read()

# 加入了seek到开头的指令（传入的是mf，也就是内存映射文件）
# 如果不这么做，mf的指针似乎被指向了mf末尾，读不到东西，返回空字节串，然后报错
# 顺带在判断条件上做了些优化





2.【pySMART】

<Python Path> \Lib\site-packages\pySMART\utils.py

30  行: - from shutil import which
        + #from shutil import which

120 行: - SMARTCTL_PATH = which('smartctl')
        + #SMARTCTL_PATH = which('smartctl')
        + SMARTCTL_PATH = "smartctl"

# 如果不改的话，即使在代码里加了“os.environ['PATH'] += f"{cwd}\\SmartMonTools\\;"”，
# 也会报找不到smartctl的错误，不知道为什么，
# 照理说“shutil.which('smartctl')”应该能识别到，
# 我在idle里这么做过，也成功打印出了smartctl的绝对路径了，
# 只不过模块依旧死活认不出来smartctl，现在只能直接写死




3.【pymupdf】

<Python Path> \Lib\site-packages\pymupdf\__init__.py


（1）
class Document:
    ……
    def __init__(……)
        ……

# 下面这部分是我重写以后的，和【cairosvg】库的修改差不多，也是为了适配传入的mf（内存映射文件）
# “isinstance(a,b)”据说要比“type(a)==b”更安全一些，顺手给优化了

2752行左右: if stream is not None:
                if hasattr(stream,"read") and hasattr(stream,"seek"):
                    stream.seek(0,os.SEEK_SET)
                    self.stream = stream.read()
                elif isinstance(stream,bytes):
                    self.stream = stream
                elif isinstance(stream,bytearray):
                    self.stream = bytes(stream)
                else:
                    raise TypeError(f"bad stream: {type(stream)=}.")

（2）
class Document:
    ……
    def close():
        ……

在 3675行 左右

整个函数套了个“try: 【之前的内容】  except: pass     finally:  return”,
然后把
“
if getattr(self, "is_closed", True):
    raise ValueError("document closed")
”
给注释掉了。

我遇到的im和tmp_io都是可以反复close的，
就pymupdf这个娇气的奇葩居然还敢抛出错误，
忍不了，改了它。

【虽然现在我的代码用with控制，只close一次，也就是说这里不改也行，
但是保不准以后会不会在with控制的代码里提前close来释放内存，所以建议还是改了】



（3）
class Pixmap:
    ……
    def pil_save(……):
        ……
        img.save(*args, **kwargs)
10196行左右: + img.close()

# close强迫症，pillow保存完图片后close，不改似乎问题不大